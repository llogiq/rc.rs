var searchIndex = {};
searchIndex['rc'] = {"items":[[0,"","rc","A reference-counted pointer that accepts DST: `Rc<str>`, `Rc<[T]>`, `Rc<Fn>`, etc",null,null],[3,"Rc","","A reference-counted pointer type over an immutable value.",null,null],[11,"new","","Creates a new `Rc` pointer.",0,{"inputs":[{"name":"rc"},{"name":"t"}],"output":{"name":"rc"}}],[11,"count","","Returns the number of references to this value.",0,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"borrow","","",0,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"clone","","",0,{"inputs":[{"name":"rc"}],"output":{"name":"rc"}}],[11,"from","","NOTE: This requires allocating the `slice` first (`Vec::to_vec`).",0,null],[11,"from","","NOTE: This requires allocating the `string` first (`String::from_str`).",0,{"inputs":[{"name":"rc"},{"name":"str"}],"output":{"name":"rc"}}],[11,"from","","NOTE: this involves a single, small heap allocation for the reference count. `boxed_value`\nwill *not* be reallocated.",0,{"inputs":[{"name":"rc"},{"name":"box"}],"output":{"name":"rc"}}],[11,"from","","NOTE: This calls `shrink_to_fit` on `string` (on the underlying `Vec<u8>`), which may incur\nin a reallocation.",0,{"inputs":[{"name":"rc"},{"name":"string"}],"output":{"name":"rc"}}],[11,"from","","NOTE: This calls `shrink_to_fit` on `vec`, which may incur in a reallocation.",0,{"inputs":[{"name":"rc"},{"name":"vec"}],"output":{"name":"rc"}}],[6,"Target","","",null,null],[11,"deref","","",0,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"drop","","",0,{"inputs":[{"name":"rc"}],"output":null}],[11,"hash","","",0,{"inputs":[{"name":"rc"},{"name":"h"}],"output":null}],[11,"eq","","",0,{"inputs":[{"name":"rc"},{"name":"rc"}],"output":{"name":"bool"}}]],"paths":[[3,"Rc"]]};
initSearch(searchIndex);
